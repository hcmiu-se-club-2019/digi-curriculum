swagger: '2.0'
info:
  version: '1.0'
  title: API Digit Curriculum
  description: Add later
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /iu-se-club/DigitCurriculum/1.0
schemes:
 - http
tags:
- name: course
  description: Add more description for Course
- name: program
  description: Add more description for Program
- name: syllabus
  description: Add more description for Syllabus
- name: book
  description: Add more description for Book
- name: instructor
  description: Add more description for Instructor
- name: department
  description: Add more description for Department
- name: pathway
  description: Add more description for Pathway
paths:
  /courses:
    get:
      tags:
      - course
      summary: Get all available course
      operationId: getCourses
      produces:
      - application/json
      responses:
        200:
          description: successfull operatioon
          schema:
            type: object
            properties:
              courses:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/Course'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
      - course
      summary: Create new course
      operationId: createCourse
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Course'
      responses:
        200:
          description: successfull operation
          schema:
            type: object
            properties:
              createdCourse:
                type: object
                $ref: '#/definitions/Course'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}:
    put:
      tags:
      - course
      operationId: updateCourse
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course 
        required: true
        type: number
      responses:
        200:
          description: sucessfull operation
          schema:
            $ref: '#/definitions/Update'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
      - course
      summary: Get specify course with CourseID
      operationId: getCourseById
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course 
        required: true
        type: number
      responses:
        200:
          description: successfull operation
          schema:
            $ref: '#/definitions/Course'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
      - course
      summary: Delete specify course with CourseID
      operationId: deleteCourseById
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course 
        required: true
        type: number
      responses:
        200:
          description: successfull operation
          schema:
            $ref: '#/definitions/Delete'
  /courses/{courseId}/topics:
    get:
      tags:
      - course
      summary: Get all topic with form general or detail assign with CourseID
      operationId: getTopics
      produces:
      - application/json
      parameters:
      - in: query
        name: view
        description: view option to choose kinds of form topic
        required: true
        type: string
        enum:
        - general
        - detail
        default: general
      - name: courseId
        in: path
        description: ID of course 
        required: true
        type: number
      responses:
        200:
          description: "Sample response with view=detail"
          schema:
            type: object
            properties:
              topics:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/TopicDetail'
        400:
          description: Bad Request
        500:
          description: Error & Message
    post:
      tags:
      - course
      summary: Create General Topic assign with CourseID
      operationId: createTopicGeneral
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course 
        required: true
        type: number
      - in: body
        name: body
        description: Information that needed to create General Topic
        required: true
        schema:
          $ref: '#/definitions/TopicGeneral'
      responses:
        200:
          description: successfull operation
          schema:
            type: object
            properties:
              createdTopic:
                type: object
                $ref: '#/definitions/TopicGeneral'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/topics/{topicId}:
    post:
      tags:
      - course
      summary: Create Topic Detail inside Topic General which has topicId, and Topic belongs to Course
      operationId: createTopicDetail
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course which have topic id
        type: number
        required: true
      - name: topicId
        in: path
        description: ID of topic where created Topic Detail will be added
        type: number
        required: true
      - in: body
        name: body
        description: Information that needed to create Topic Detail
        required: true
        schema:
          type: object
          properties:
            id:
              type: number
            topic_detail:
              type: string
            week:
              type: number
      responses:
        200:
          description: successfull operation
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
      - course
      summary: Update Topic Details ( which is belongs to Topic )
      operationId: updateTopic
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course
        required: true
        type: number
      - name: topicId
        in: path
        description: ID of topic
        required: true
        type: number
      - in: body
        name: body
        description: Information of Topic need to create ( general -> target=general & vice versa )
        schema:
          type: object
          description: "target = general OR target = detail"
          properties:
            general:
                type: object
                $ref: '#/definitions/TopicGeneral'
            detail:
                type: object
                $ref: '#/definitions/TopicDetail'
      - in: query
        name: target
        description: Update to target 
        type: string
        enum:
        - general
        - detail
      responses:
        200:
          description: Sample response (general -> target=general)
          schema:
            $ref: '#/definitions/Update'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
      - course
      summary: Delete Topic or Topic Detail depend on target
      operationId: deleteTopic
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course
        required: true
        type: string
      - name: topicId
        in: path
        description: ID of topic
        required: true
        type: number
      - in: query
        name: target
        type: string
        description: Set action to target ( detail or general )
        required: true
      responses:
        200:
          description: success opertation
          schema:
            $ref: '#/definitions/Delete'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/instructors:
    get:
      tags:
      - course
      summary: Get all instructors related to CourseID
      operationId: getInstructorsFromCourse
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course
        type: string
        required: true
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              instructors:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/Instructor'

        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/programs:
    get:
      tags:
      - course
      summary: Find all programs that CourseID have assigned
      operationId: findAllProgramOfCourse
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course
        type: string
        required: true
      responses:
        200:
          description: successfull operation
          schema:
            type: object
            properties:
              programs:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        CourseProgram:
                          type: object
                          properties:
                            course_code:
                              type: string
                            course_id:
                              type: string
                            course_type_id:
                              type: number
                            program_id:
                              type: number
                    - $ref: '#/definitions/Program'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/los:
    get:
      tags:
      - course
      summary: Get all learning outcome of CourseID
      operationId: getLearningOutcomes
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course
        type: string
        required: true
      responses:
        200:
          description: successfull operation
          schema:
            type: object
            properties:
              learningOutcomes:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/LearningOutcome'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
      - course
      summary: Create new learning outcome for CourseID
      operationId: createLearningOutcome
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course
        type: string
        required: true
      - in: body
        name: body
        description: Information that needed to create new learning outcome
        required: true
        schema:
          $ref: '#/definitions/LearningOutcome'
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              status:
                type: string
                enum:
                - update
                - new
              createdLearningOutcome:
                type: object
                $ref: '#/definitions/LearningOutcome'
              isUpdated:
                type: number
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/los/{loId}:
    put:
      tags:
      - course
      summary: Update Learning Outcome
      operationId: updateLearningOutcome
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of Course
        type: string
        required: true
      - name: loId
        in: path
        description: ID of Learning Outcome
        type: number
        required: true
      - in: body
        name: body
        description: Available field can updated in Learning Outcome
        required: true
        schema:
          $ref: '#/definitions/LearningOutcome'
      responses:
        200:
          description: sucessful operation
          schema:
            $ref: '#/definitions/Update'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/books:
    get:
      tags:
      - course
      summary: get all books asign with CourseID
      operationId: getAllBooksOfCourse
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of Course
        type: string
        required: true
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              books:
                type: array
                items:
                  allOf:
                  - type: object
                    properties:
                      CourseBook:
                        type: object
                        properties:
                          book_id:
                            type: number
                          course_id:
                            type: string
                          type:
                            type: array
                            items:
                              type: string
                              enum:
                              - textbook
                              - reference
                  - $ref: '#/definitions/Book'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/assignBook:
    get:
      tags:
      - course
      summary: assign book to course
      operationId: assignBook
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course
        type: string
        required: true
      - in: query
        name: bookid
        description: ID of book to be assigned to Course
        type: number
        required: true
      - in: query
        name: type
        description: type of book ( reference or textbook )
        type: string
        enum:
        - reference
        - textbook
        default: reference
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              assignedBook:
                type: object
                properties:
                  type:
                    type: string
                  book_id:
                    type: number
                  course_id:
                    type: string
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/books/{bookId}:
    delete:
      tags:
      - course
      summary: delete link of bookID which is assigned to CourseID
      operationId: deleteBookOfCourse
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course
        type: string
        required: true
      - name: bookId
        in: path
        description: BookID of book we want to unlink
        type: number
        required: true
      responses:
        200:
          description: sucessful operation
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/assessments:
    get:
      tags:
      - course
      summary: Get all assessments of CourseID
      operationId: getAssessmentsOfCourse
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course
        type: string
        required: true
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              Assessments:
                type: array
                items:
                  allOf:
                  - type: object
                    properties:
                      CourseAssessment:
                        type: object
                        properties:
                          assessment_id:
                            type: number
                          course_id:
                            type: number
                          percentage:
                            type: number
                  - $ref: '#/definitions/Assessment'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/assignAssessment:
    get:
      tags:
      - course
      summary: Assign assessment to CourseID
      operationId: assignAssessment
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of Course
        type: string
        required: true
      - in: query
        name: assessmentId
        description: ID of assessment which we want to assign to CourseID
        type: number
        required: true
      - in: query
        name: percentage
        description: Set percentage with Assignment for CourseID
        type: number
        required: true
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              assignedAssessment:
                type: object
                properties:
                  course_id:
                    type: string
                  assessment_id:
                    type: number
                  percentage:
                    type: number
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/assessments/{assessmentId}:
    put:
      tags:
      - course
      summary: update some of field in assessment with ID = assessmentId
      operationId: updateAssessment
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course
        type: string
        required: true
      - name: assessmentId
        in: path
        description: ID of assessment we want to update
        type: number
        required: true
      - in: body
        name: body
        description: Some fields of assessment we want to update
        schema:
          $ref: '#/definitions/Assessment'
      responses:
        200:
          description: success operation
          schema:
            $ref: '#/definitions/Update'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
      - course
      summary: Delete link Course-Assessment
      operationId: deleteAssessment
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course
        type: string
        required: true
      - name: assessmentId
        in: path
        description: ID of assessment we want to unlink
        type: number
        required: true
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Delete'
        400:
          description: Bad Reqest
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/assessmentTools:
    get:
      tags:
      - course
      summary: Get AssessmentTools(learning_outcome,assessment_id,course_id,...) of CourseID
      operationId: getAssessmentTools
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course
        type: string
        required: true
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              allOf:
              - type: object
                properties:
                  LearningOutcome:
                    type: object
                    properties:
                      description:
                        type: string
              - $ref: '#/definitions/AssessmentTool'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
      - course
      summary: Create new AssessmentTools for CourseID
      operationId: createAssessmentTool
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of Course
        type: string
        required: true
      - in: body
        name: body
        description: Information that is needed to create new assessment tool for CourseID
        required: true
        schema:
          $ref: '#/definitions/AssessmentTool'
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              createdAssessmentTool:
                type: object
                $ref: '#/definitions/AssessmentTool'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/assessmentTools/{assessmentToolId}:
    delete:
      tags:
      - course
      summary: delete assessmentTool which has assessmentToolId belongs CourseID
      operationId: deleteAssessmentTool
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of Course
        type: string
        required: true
      - name: assessmentToolId
        in: path
        description: AssessmentToolID of assessment tool we want to delete
        type: number
        required: true
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Delete'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/relatedCourse:
    get:
      tags:
      - course
      summary: Get all related courses with have relationsip with CourseID
      operationId: getRelatedCourses
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of Course
        type: string
        required: true
      responses:
        200:
          description: sucessful operation
          schema:
            type: object
            properties:
              courseRelateCourses:
                type: object
                properties:
                  course_id:
                    type: string
                  name:
                    type: string
                  related_courses:
                    type: array
                    items:
                      type: object
                      properties:
                        CourseCourse:
                          type: object
                          $ref: '#/definitions/CourseCourse'
                        name:
                          type: string
                        related_course_id:
                          type: string
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/relate/{relatedCourseId}:
    get:
      tags:
      - course
      summary: Make relationship between two courses
      operationId: relateCourse
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of Course_1
        type: string
        required: true
      - name: relatedCourseId
        in: path
        description: ID of Course_2 (related course)
        type: string
        required: true
      responses:
        200:
          description: sucessful operation
          schema:
            type: object
            properties:
              relatedCourse:
                type: object
                $ref: '#/definitions/CourseCourse'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/relationship/{relatedCourseId}:
    put:
      tags:
      - course
      summary: Update relationship
      operationId: updateRelationshipCourse
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of Course_1
        type: string
        required: true
      - name: relatedCourseId
        in: path
        description: ID of Course_2 ( related Course )
        type: string
        required: true
      - in: body
        name: body
        description: Fields needed to update Relationship
        required: true
        schema:
          $ref: '#/definitions/CourseCourse'
      responses:
        200:
          description: sucessful operation
          # for OpenAPI 3 -> can use oneOf
          schema:
            type: object
            properties:
              status:
                type: string
                enum:
                - update
                - create
              isUpdated:
                type: number
              createdRelationship:
                type: object
                $ref: '#/definitions/CourseCourse'
              _this_is_just_comment:
                type: string
                example: "Don't have field relationship in createdRelationship, If course-course have relationship, we have only field udpate & status"
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
      - course
      summary: Delete relationship between two course
      operationId: deleteRelationship
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of Course_1
        type: string
        required: true
      - name: relatedCourseId
        in: path
        description: ID of Course_2 ( related course )
        type: string
        required: true
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Delete'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /books:
    get:
      tags:
      - book
      summary: Get all book of University
      operationId: getAllBooks
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/Book'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
      - book
      summary: Create new book
      operationId: createBook
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Fiels needed to create book
        schema:
          $ref: '#/definitions/Book'
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              createdBook:
                type: object
                $ref: '#/definitions/Book'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /book/{bookId}:
    put:
      tags:
      - book
      summary: update some fields in book
      operationId: updateBook
      produces:
      - application/json
      parameters:
      - name: bookId
        in: path
        description: delete book which has BookID
        type: number
        required: true
      - in: body
        name: body
        description: Fields needed to update book
        required: true
        schema:
          $ref: '#/definitions/Book'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Update'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
      - book
      summary: deleteBook
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: bookId
        in: path
        description: Delete book which has BookID
        type: number
        required: true
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Delete'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /instructors:
    get:
      tags:
      - instructor
      summary: Get all instructors of University
      operationId: getAllInstructors
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              instructors:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/Instructor'
        400:
          description: Bad Request
        500:
          description: Error & Message
    post:
      tags:
      - instructor
      summary: add new instructor in University
      operationId: createInstructor
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Fieds that needed to create new instructor
        schema:
          $ref: '#/definitions/Instructor'
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              createdInstructor:
                type: object
                $ref: '#/definitions/Instructor'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /instructors/{instructorId}:
    get:
      tags:
      - instructor
      summary: Get specify instructor which has InstructorID
      operationId: getInstructorById
      produces:
      - application/json
      parameters:
      - name: instructorId
        in: path
        description: ID of instructor
        type: number
        required: true
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              instructor:
                type: object
                $ref: '#/definitions/Instructor'
    put:
      tags:
      - instructor
      summary: Update information of Instructor
      operationId: updateInstructor
      consumes:
      - application/json
      produces: 
      - application/json
      parameters:
      - name: instructorId
        in: path
        description: ID of instructor
        type: number
        required: true
      - in: body
        name: body
        description: Available fields we can have update
        required: true
        schema:
          $ref: '#/definitions/Instructor'
      responses:
        200:
          description: successful operatin
          schema:
            $ref: '#/definitions/Update'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
      - instructor
      summary: Delete instructor
      operationId: deleteInstructor
      produces:
      - application/json
      parameters:
      - name: instructorId
        in: path
        description: ID of instructor
        type: number
        required: true
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Delete'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /departments:
    get:
      tags:
      - department
      summary: Get all departments of University
      operationId: getDepartments
      produces:
      - application/json
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            properties:
              departments:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/Department'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
      - department
      summary: Create new departments
      operationId: createDepartment
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Fields needed to create new department
        required: true
        schema:
          $ref: '#/definitions/Department'
      responses:
        200:
          description: sucessful operation
          schema:
            type: object
            properties:
              createdDepartment:
                type: object
                $ref: '#/definitions/Department'
        400:
          description: Bad Request
        500:
          description: Error & Message
  /departments/{departmentId}:
    put:
      tags:
      - department
      summary: Update information of department
      operationId: updateDepartment
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: departmentId
        in: path
        description: ID of department
        type: number
        required: true
      - in: body
        name: body
        description: Available fields of Department can be updated for 
        required: true
        schema:
          $ref: '#/definitions/Department'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Update'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /departments/{departmentId}/courses:
    get:
      tags:
      - department
      summary: Get all available coures in Department which has DepartmentID
      operationId: getCoursesOfDepartment
      produces:
      - application/json
      parameters:
      - name: departmentId
        in: path
        description: ID of department
        required: true
        type: number
      responses:
        200:
          description: successfull operation
          schema:
            allOf:
            - type: object
              properties:
                CourseDepartment:
                  type: object
                  properties:
                    course_id:
                      type: string
                    department_id:
                      type: number
            - $ref: '#/definitions/Course'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /departments/{departmentId}/instructors:
    get:
      tags:
      - department
      summary: Get all available instructors in Department which has DepartmentID
      operationId: getInstructorsOfDepartment
      produces:
      - application/json
      parameters:
      - name: departmentId
        in: path
        description: ID of department
        type: number
        required: true
      responses:
        200:
          description: successful operation
          schema:
            allOf:
              - type: object
                properties:
                  DepartmentInstructor:
                    type: object
                    properties:
                      department_id:
                        type: number
                      instructor_id:
                        type: number
              - $ref: '#/definitions/Instructor'
        400:
          description: Bad Request
        500:
          description: Error & Mesasge
          schema:
            $ref: '#/definitions/Error'
  /pathways:
    get:
      tags:
      - pathway
      summary: get all available pathways in University
      operationId: getPathways
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              pathways:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/Pathway'
    post:
      tags:
      - pathway
      summary: create new pathway in University
      operationId: createPathway
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Fields needed to create pathway
        required: true
        schema:
          $ref: '#/definitions/Pathway'
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              createdPathway:
                type: object
                $ref: '#/definitions/Pathway'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /pathway/{pathwayId}:
    put:
      tags:
      - pathway
      summary: Update information for Pathway
      operationId: updatePathway
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: pathwayId
        in: path
        description: ID of pathway we need to udpate
        required: true
        type: number
      - in: body
        name: body
        description: Available Fields in Pathway we can update
        required: true
        schema:
          $ref: '#/definitions/Pathway'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Update'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
      - pathway
      summary: Delete pathway
      operationId: deletePathway
      produces:
      - application/json
      parameters:
      - name: pathwayId
        in: path
        description: ID of pathway we want to delete
        required: true
        type: number
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Delete'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /programs:
    get:
      tags:
      - program
      summary: Get all programs of University 
      operationId: getAllPrograms
      produces:
      - application/json
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              programs:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/Program'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
      - program
      summary: Create new programs for Unversity
      operationId: createProgram
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Fields needed to create program
        required: true
        schema:
          $ref: '#/definitions/Program'
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              createdProgram:
                type: object
                $ref: '#/definitions/Program'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /programs/{programId}:
    put:
      tags:
      - program
      summary: Update information of Program
      operationId: updateProgram
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: programId
        in: path
        description: ID of program
        type: number
        required: true
      - in: body
        name: body
        description: Available fields in Program can be updated
        required: true
        schema:
          $ref: '#/definitions/Program'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Update'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
      - program
      summary: delete program
      operationId: deleteProgram
      produces:
      - application/json
      parameters:
      - name: programId
        in: path
        description: ID of program we want to remove
        required: true
        type: number
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Delete'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /programs/{programId}/courses:
    get:
      tags:
      - program
      summary: get all courses in ProgramID
      operationId: getAllCoursesOfProgram
      produces:
      - application/json
      parameters:
      - name: programId
        in: path
        description: ID of program
        type: number
        required: true
      responses:
        200:
          description: successful operation
          schema:
            allOf:
              - type: object
                properties:
                  CourseProgram:
                    type: object
                    properties:
                      course_code:
                        type: string
                      course_id:
                        type: string
                      course_type_id:
                        type: number
                      program_id:
                        type: number
              - $ref: '#/definitions/Course'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /programs/{programId}/courses/{courseId}:
    put:
      tags:
      - program
      summary: Update relationship between Course & Program ( course_code, course_type_id )
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: programId
        in: path
        description: ID of program
        type: number
        required: true
      - name: courseId
        in: path
        description: ID of course
        type: string
        required: true
      - in: body
        name: body
        description: Fields can be updated
        schema:
          type: object
          properties:
            course_code:
              type: string
            course_type_id:
              type: number
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Update'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
      - program
      summary: delete relationship between course & program
      operationId: deleteCourseOfProgram
      produces:
      - application/json
      parameters:
      - name: programId
        in: path
        description: ID of program
        type: number
        required: true
      - name: courseId
        in: path
        description: ID of course
        type: string
        required: true
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Delete'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /programs/{programId}/assignCourse:
    get:
      tags:
      - program
      summary: assign course to programID
      operationId: assignCourse
      produces:
      - application/json
      parameters:
      - name: programId
        in: path
        description: ID of Program
        type: number
        required: true
      - in: query
        name: courseId
        description: ID of assigned Course
        type: string
        required: true
      - in: query
        name: typeId
        description: Type of assigned Course
        type: number
        default: 1
        required: false
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              assignedCourse:
                type: object
                properties:
                  course_type_id:
                    type: number
                  course_id:
                    type: string
                  program_id:
                    type: number
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /syllabus/{programId}:
    get:
      tags:
      - syllabus
      summary: Get syllabus of ProgramID
      operationId: getSyllabus
      produces:
      - application/json
      parameters:
      - name: programId
        in: path
        description: ID of program we want to get syllabus
        required: true
        type: number
      - in: query
        name: pathwayId
        description: syllabus with pathway
        type: number
        default: 1
        required: false
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Syllabus'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /syllabus/{programId}/assignCourse/{courseId}:
    get:
      tags:
      - syllabus
      summary: assign CourseID to syllabus with Pathway,Semester,Year
      operationId: assignCourseToSyllabus
      produces:
      - application/json
      parameters:
      - name: programId
        in: path
        description: ID of program
        type: number
        required: true
      - name: courseId
        in: path
        description: ID of course we want to assign to syllabus
        type: string
        required: true
      - in: query
        name: pathwayId
        description: ID of pathway of assigned course in syllabus
        type: number
        default: 1
        required: false
      - in: query
        name: semester
        description: Semester of assigned course in syllabus
        type: number
        default: 1
        required: false
      - in: query
        name: year
        description: Year of assigned course in syllabus
        type: number
        default: 1
        required: false
      responses:
        200:
          description: successful operation
          schema:
            type: object
            properties:
              assignedCourse:
                type: object
                properties:
                  course_id:
                    type: string
                  id:
                    type: number
                  pathway_id:
                    type: number
                  program_id:
                    type: number
                  semester:
                    type: number
                  year:
                    type: number
              status:
                type: string
                enum:
                - new
                - update
              isUpdated:
                type: number
              _this_is_just_comment:
                type: string
                example: "Alway has status field and If status = new -> we have assignedCourse, vice versa status = update -> only have isUpdate"
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /syllabus/{programId}/{courseId}:
    delete:
      tags:
      - syllabus
      summary: delete course in syllabus
      operationId: deleteCourseInSyllabus
      produces:
      - application/json
      parameters:
      - name: programId
        in: path
        description: ID of program
        type: number
        required: true
      - name: courseId
        in: path
        description: ID of course we want to delete in syllabus
        type: string
        required: true
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Delete'
        400:
          description: Bad Request
        500:
          description: Error & Message
          schema:
            $ref: '#/definitions/Error'
  /courses/{courseId}/details:
    get:
      tags:
      - course
      summary: get full details of course ( books, assessments, ... )
      produces:
      - application/json
      parameters:
      - name: courseId
        in: path
        description: ID of course
        type: string
        required: true
      responses:
        200:
          description: sucessful operation
          schema:
            type: object
            properties:
              assessments:
                type: array
                items:
                  allOf:
                  - type: object
                    properties:
                      CourseAssessment:
                        allOf:
                        - type: object
                          properties:
                            assessment_id:
                              type: number
                            course_id:
                              type: string
                            percentage:
                              type: number
                  - $ref: '#/definitions/Assessment'
              books:
                type: array
                items:
                  allOf:
                  - type: object
                    properties:
                      CourseBook:
                        type: object
                        properties:
                          book_id:
                            type: number
                          course_id:
                            type: string
                          type:
                            type: string
                            enum:
                            - textbook
                            - reference
                  - $ref: '#/definitions/Book'
              courseRelateCourses:
                type: object
                properties:
                  courseRelateCourses:
                    type: object
                    properties:
                      course_id:
                        type: string
                      name:
                        type: string
                      related_courses:
                        type: array
                        items:
                          allOf:
                          - $ref: '#/definitions/CourseCourse'
                          - type: object
                            properties:
                              name:
                                type: string
                              related_course_id:
                                type: string
              information:
                type: object
                $ref: '#/definitions/Course'
              learningOutcomes:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/LearningOutcome'
              tools:
                type: array
                items:
                  allOf:
                  - type: object
                    properties:
                      AssessmentTools:
                        type: array
                        items:
                          allOf:
                          - type: object
                            properties:
                              LearningOutcome:
                                type: object
                                properties:
                                  description:
                                    type: string
                          - $ref: '#/definitions/AssessmentTool'
                  - $ref: '#/definitions/Assessment'
              topics:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/TopicDetail'
definitions:
  Course:
    type: object
    properties:
      id:
        type: string
      course_level_id:
        type: number
        default: 1
      credit_theory:
        type: number
        default: 3
      credit_lab:
        type: number
        default: 1
      description:
        type: string
      name:
        type: string
      name_vn:
        type: string
        description: "Optional Field"
      level:
        type: string
        description: "Optional Field"
  CourseCourse:
    description: Relationship between Course-Course
    type: object
    properties:
      course_id1:
        type: string
      course_id2:
        type: string
      relationship:
        description: Optional Field
        type: string
        enum:
        - prerequisites
        - co-requisites
        - previous
        - placeholder
      relationship_id:
        type: number
  Instructor:
    type: object
    properties:
      degree:
        type: string
      email:
        type: string
      id:
        type: number
      name:
        type: string
  Department:
    type: object
    properties:
      id:
        type: number
      name:
        type: string
  Program:
    type: object
    properties:
      id:
        type: number
      discipline:
        type: string
      name:
        type: string
      duration:
        type: number
      major:
        type: string
        enum:
        - Computer Engineering
        - Networking
        - Information Technology
      type:
        type: string
      version:
        type: number
  Syllabus:
    type: object
    properties:
      discipline:
        type: string
      pathwayId:
        type: number
      programId:
        type: number
      syllabus:
        type: array
        items:
          type: array
          items:
            type: array
            items:
              type: object
              properties:
                Course:
                  type: object
                  $ref: '#/definitions/Course'
                course_id:
                  type: string
                id:
                  type: number
                pathway_id:
                  type: number
                program_id:
                  type: number
                semester:
                  type: number
                year:
                  type: number
  LearningOutcome:
    type: object
    properties:
      id:
        type: number
        description: ID of Learning Outcome
      cousre_id:
        type: string
        description: CourseID which contain this LearningOutcome
      description:
        type: string
  Book:
    type: object
    properties:
      id:
        type: number
      title:
        type: string
      ISBN:
        type: string
      author:
        type: string
      type:
        type: string
        enum:
        - book
        - note
      version:
        type: string
      year:
        type: number
  Assessment:
    type: object
    properties:
      id:
        type: number
      type:
        type: string
        enum:
        - Quiz
        - Homework/ Assignment
        - Labs
        - Midterm examination
        - Projects/Presentations/ Report
        - Final examination
        - Prelab
        - In-class ongoing assessment
        - Exercises/ Quiz
  AssessmentTool:
    type: object
    properties:
      id:
        type: number
      loutcome_id:
        type: number
      course_id:
        type: string
        description: Optional Field
  TopicGeneral:
    type: object
    properties:
      course_id:
        type: string
        description: "Topic belongs to Course has course_id "
      id:
        type: number
        description: "Topic ID"
      learning_activities:
        type: string
      name:
        type: string
      topic_type_id:
        type: number
  TopicDetail:
    type: object
    properties:
      TopicDetails:
        type: array
        items:
          type: object
          properties:
            id:
              type: number
            topic_detail:
              type: string
              description: Name of Topic Detail
            week:
              type: number
              description: "???"
      TopicType:
        type: object
        properties:
          type:
            type: string
            description: Name Type of Topic
      course_id:
        type: string
      id:
        type: number
      learning_activities:
        type: string
      name:
        type: string
      topic_type_id:
        type: number
  Pathway:
    type: object
    properties:
      id:
        type: number
      pathway:
        type: string
  Error:
    type: object
    properties:
      error:
        type: boolean
      message:
        type: string
  Update:
    type: object
    properties:
      isUpdated:
        type: number
        description: "1 -> true, 0 -> false"
  Delete:
    type: object
    properties:
      isDeleted:
        type: number
        description: "1 -> true, 0 -> false"
